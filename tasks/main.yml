---
# tasks file for deploy-ssl-certificate
- name: The certificat and the pkey must be related
  ansible.builtin.assert:
    that:
      - cert_pubkey_fingerprint == pkey_pubkey_fingerprint
    fail_msg: "Provided cert and pkey are not matching."
  vars:
    cert_pubkey_fingerprint: "{{ (__deployssl_cert_content[0] | community.crypto.x509_certificate_info).public_key_fingerprints.sha512 }}"
    pkey_pubkey_fingerprint: "{{ (__deployssl_pkey_content | community.crypto.openssl_privatekey_info).public_key_fingerprints.sha512 }}"

- name: Check if cert will be replaced
  ansible.builtin.stat:
    path: "{{ deployssl_pem_cert_trgt }}"
    follow: true
  register: __current_cert_stat

- name: Get pkey file mode
  ansible.builtin.stat:
    path: "{{ deployssl_pem_pkey_trgt }}"
    follow: true
  register: __current_pkey_stat

- name: Certificat checks
  when:
    - __current_cert_stat.stat.exists
    - not deployssl_force_deploy
  block:
    - name: Get infos from current certificate
      community.crypto.x509_certificate_info:
        path: "{{ deployssl_pem_cert_trgt }}"
      register: __current_cert
    - name: The replacement certificate should have at least the same subject(s)
      ansible.builtin.assert:
        that:  # noqa jinja[invalid]
          - not __certs_subject_difference
        fail_msg: "New cert will NOT serve for the following domains: {{ __certs_subject_difference| join(',') }}"
      vars:
        __new_cert_infos: "{{ __deployssl_cert_content[0] | community.crypto.x509_certificate_info }}"
        __certs_subject_difference: "{{ __current_cert.subject_alt_name | difference(__new_cert_infos.subject_alt_name) }}"

- name: Copy over the pem file
  ansible.builtin.copy:
    dest: "{{ deployssl_pem_cert_trgt }}"
    content: "{{ (deployssl_split_fullchain or deployssl_create_fullchain) | ternary(__deployssl_cert_content[0], __deployssl_cert_content_unsafe) }}"
    backup: true
    mode: "{{ __current_cert_stat.stat.mode | default('0644') }}"
  notify:
    - "Reload affected services"
    - "Restart affected services"
    - "Touch a file"

- name: Copy over the pkey file
  ansible.builtin.copy:
    dest: "{{ deployssl_pem_pkey_trgt }}"
    content: "{{ __deployssl_pkey_content }}"
    backup: true
    mode: "{{ __current_pkey_stat.stat.mode | default('0640') }}"
  no_log: true
  notify:
    - "Reload affected services"
    - "Restart affected services"
    - "Touch a file"

- name: Create the pem chain file
  ansible.builtin.copy:
    dest: "{{ deployssl_pem_cert_trgt | dirname }}/{{ (deployssl_chain_file_name | length > 0) |
      ternary(deployssl_chain_file_name, __chain_file_name) }}"
    content: |
      {% for elem in __deployssl_chain_content %}{{ elem }}
      {% endfor %}
    backup: true
    mode: "{{ __current_cert_stat.stat.mode| default('0644') }}"
  vars:
    __chain_file_name: "{{ (deployssl_pem_cert_trgt | basename | split('.'))[:-1] | join('.') }}_chain.{{ __deployssl_cert_extension }}"
  when:
    - deployssl_split_fullchain
    - __deployssl_chain_content | length > 0
  notify:
    - "Reload affected services"
    - "Restart affected services"
    - "Touch a file"

- name: Create the fullchain file
  ansible.builtin.copy:
    dest: "{{ deployssl_pem_cert_trgt | dirname }}/{{ (deployssl_fullchain_file_name | length > 0) |
      ternary(deployssl_fullchain_file_name, __fullchain_file_name) }}"
    content: |
      {{ __deployssl_cert_content[0] }}
      {% for elem in __deployssl_chain_content %}{{ elem }}
      {% endfor %}
    backup: true
    mode: "{{ __current_cert_stat.stat.mode| default('0644') }}"
  vars:
    __fullchain_file_name: "{{ (deployssl_pem_cert_trgt | basename | split('.'))[:-2] }}_fullchain.{{ __deployssl_cert_extension }}"
  when:
    - deployssl_create_fullchain
    - __deployssl_chain_content | length > 0
  notify:
    - "Reload affected services"
    - "Restart affected services"
    - "Touch a file"
